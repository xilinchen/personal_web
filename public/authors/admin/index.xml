<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xilin Chen</title>
    <link>/authors/admin/</link>
      <atom:link href="/authors/admin/index.xml" rel="self" type="application/rss+xml" />
    <description>Xilin Chen</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Xilin Chen</title>
      <link>/authors/admin/</link>
    </image>
    
    <item>
      <title>Build Your First Shiny App</title>
      <link>/post/first_shiny_app/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/first_shiny_app/</guid>
      <description>

&lt;h1 id=&#34;intro-and-background&#34;&gt;Intro and Background&lt;/h1&gt;

&lt;p&gt;Several weeks ago I started working on my first Shiny app in response for the Covid19 staffing needs. The team I worked with have an understanding of their needs but don&amp;rsquo;t really have a solid specs of how we want to implement the ideas to form actual products that could help hospitals and nursing homes. Luckily, in our team, we have physicians, hospital admins and medical students who all know the needs and gaps, and how they would like to get helped.&lt;/p&gt;

&lt;p&gt;Anyway, this was a pretty urgent task since the rapid growing Covid patients. The earlier we got the application done, the hospitals and admins can start to use immediately to address their problems.&lt;/p&gt;

&lt;p&gt;Finally, I have never build Shiny app before but I have some understandings of the features and potentials that I could achieve in Shiny. So I started my Shiny journey and actually got my first shiny apps. In this post, I want to share some of my experience hoping it could help some new users like me. To find the Shiny app I build, you can check this &lt;a href=&#34;https://github.com/UMCSTaR/staff_projection&#34; target=&#34;_blank&#34;&gt;repo&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;content&#34;&gt;Content&lt;/h1&gt;

&lt;h2 id=&#34;let-s-get-started&#34;&gt;Let&amp;rsquo;s get started&lt;/h2&gt;

&lt;h3 id=&#34;ui-and-server&#34;&gt;UI and Server&lt;/h3&gt;

&lt;p&gt;I like to keep UI and Serve in different files instead of lumping it into one script. It makes my life much easier in the long run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UI&lt;/strong&gt;: Anything related to the application user interface design is located in this file. For example, how you want you page look like (color, fond, titles, buttons, sliders etc.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sever&lt;/strong&gt;: Your normal R code lives here. For example, your tidyverse data cleaning, join tables, running models, generate ggplots are here.&lt;/p&gt;

&lt;p&gt;With that been said, the most significant difference is that when you need a variable to be reactive (or interactive based on your inputs), you need to use &lt;code&gt;input$your_reactive_variable_name&lt;/code&gt; in the Server script. In the UI script, the interactive variable should be the same name as &lt;code&gt;your_reactive_variable_name&lt;/code&gt;, so UI and Server can talk to each other and know to how react.&lt;/p&gt;

&lt;p&gt;Below is an example to demonstrate the idea:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)

# UI: define how the app looks
ui &amp;lt;- fluidPage(sidebarLayout(

sidebarPanel(
    # my_interactive_var1 is defined here
    sliderInput(
        &amp;quot;my_interactive_var1&amp;quot;,
        &amp;quot;Number of bins:&amp;quot;,
        min = 1,
        max = 50,
        value = 30
    )
),

mainPanel(textOutput(&amp;quot;changing_numbers&amp;quot;))))

# Server: nomal R code
server &amp;lt;- function(input, output) {
    output$changing_numbers &amp;lt;- renderText({
        # using input$my_interactive_var1 to communicate with UI
        paste0(&amp;quot;My changing values: &amp;quot;, input$my_interactive_var1)
    })
}

# Run the application
shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the example above, how the output get display was also demonstrated. &lt;code&gt;changing_numbers&lt;/code&gt; in the UI script is the output your wanted to display. As you can see, in the server script, &lt;code&gt;output$changing_numbers&lt;/code&gt; was used to
communicate with UI. You always need to use &lt;code&gt;output$&lt;/code&gt; in your Server script if you want to output something in the UI.&lt;/p&gt;

&lt;h3 id=&#34;input-and-output&#34;&gt;Input and Output&lt;/h3&gt;

&lt;p&gt;Let look at UI first, I like to separate input and output using &lt;code&gt;sidebarPanel&lt;/code&gt; and &lt;code&gt;mainPanel&lt;/code&gt; respectively. It makes things easier for beginner.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;sidebarPanel&lt;/code&gt;, I would put all the input values there. You can design your inputs in UI first without worrying the server script ,like numeric &lt;code&gt;my_interactive_var2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)

# UI: define how the app looks
ui &amp;lt;- fluidPage(sidebarLayout(sidebarPanel(
  # my_interactive_var1 is defined here
  sliderInput(
    &amp;quot;my_interactive_var1&amp;quot;,
    &amp;quot;Number of bins:&amp;quot;,
    min = 1,
    max = 50,
    value = 30
  ),
  
  # add a new entry here
  numericInput(
    &amp;quot;my_interactive_var2&amp;quot;,
    &amp;quot;My number entry&amp;quot;,
    min = 1,
    max = 50,
    value = 30
  )
),

mainPanel(textOutput(&amp;quot;changing_numbers&amp;quot;))))

# Server: nomal R code
server &amp;lt;- function(input, output) {
  output$changing_numbers &amp;lt;- renderText({
    # using input$my_interactive_var1 to communicate with UI
    paste0(&amp;quot;My changing values: &amp;quot;, input$my_interactive_var1)
  })
}

# Run the application
shinyApp(ui = ui, server = server)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;mainPanel&lt;/code&gt;, here is where you could define all your output, for example, tables, plots or a sentence.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add a table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)
library(tidyverse)

# UI: define how the app looks
ui &amp;lt;- fluidPage(sidebarLayout(sidebarPanel(
  # my_interactive_var1 is defined here
  sliderInput(
    &amp;quot;my_interactive_var1&amp;quot;,
    &amp;quot;Number of bins:&amp;quot;,
    min = 1,
    max = 50,
    value = 30
  ),
  
  numericInput(
    &amp;quot;my_interactive_var2&amp;quot;,
    &amp;quot;My number entry&amp;quot;,
    min = 1,
    max = 50,
    value = 30
  )
),

mainPanel(
  textOutput(&amp;quot;changing_numbers&amp;quot;),
  # add my defined table here
  tableOutput(&amp;quot;my_defined_table&amp;quot;)
  )))

# Server: nomal R code
server &amp;lt;- function(input, output) {
  output$changing_numbers &amp;lt;- renderText({
    # using input$my_interactive_var1 to communicate with UI
    paste0(&amp;quot;My changing values: &amp;quot;, input$my_interactive_var1)
  })
  

  # my define table is here, use output$output$my_defined_table
  output$my_defined_table &amp;lt;- renderTable({
    iris %&amp;gt;% 
      head()
  })
  
}

# Run the application
shinyApp(ui = ui, server = server)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;end&#34;&gt;End&lt;/h1&gt;

&lt;p&gt;Hopefully, this simple introduction could help you a little when you first started your Shiny journey. Once you get the gist of it, you can build up a lot cool features by just googling how. Also, looking for Shiny examples other people put out there was very helpful for me to know the potential and what I can achieve. One of the most difficult things when you get started is ti know what the possibilities are.&lt;/p&gt;

&lt;p&gt;Most importantly, Have fun!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./fun.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some Tips for Using Sparklyr</title>
      <link>/post/sparklyr_medicare/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/sparklyr_medicare/</guid>
      <description>

&lt;p&gt;One of the challenges when using R for data processing is the limitation of memory. R read data into memory. It has a lot advantages like fast computing, but when working with big data, we would have problems that our over-sized data can&amp;rsquo;t be loaded into R.&lt;/p&gt;

&lt;p&gt;In our research team, all of the analyst colleagues using SAS to address the big data loading problem, since SAS use hard drive to read in data. For me, our group use R for analysis and I am already proficient in R. So I decided to use R to process the Medicare data.&lt;/p&gt;

&lt;p&gt;In this post, I want to introduce a little about why using Spark (what are the advantages) and how you can implement the process I have done if you have the similar problems.&lt;/p&gt;

&lt;p&gt;Here is a great reference book, &lt;a href=&#34;https://therinspark.com/&#34; target=&#34;_blank&#34;&gt;Mastering Apache Spark with R&lt;/a&gt; by Javier Luraschi. If you already have basic skills in R programming, it is an easy book to read and very practical.&lt;/p&gt;

&lt;h2 id=&#34;hippa-data&#34;&gt;HIPPA Data&lt;/h2&gt;

&lt;p&gt;Medicare data has very restricted regulation on how and where to use data. CMS data regulations are actually more strict than HIPPA in some aspects. In our data use agreement, Medicare data can only be stored in a specific network within the university and we can not put data in cloud or any distributed fashion. So all the analysis in this post happened and had to be on my local computer.&lt;/p&gt;

&lt;h2 id=&#34;concepts-of-apache-spark&#34;&gt;Concepts of Apache Spark&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Sparklyr&lt;/em&gt; is just a wrapper for Apache Spark. Basically, it translates the R syntax to the language Spark can read. All the big data operations happened in Spark instead of R.&lt;/p&gt;

&lt;h3 id=&#34;hadoop-and-spark&#34;&gt;Hadoop and Spark&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hadoop&lt;/strong&gt; was first introduced before Spark. But it build the foundation for the development of Spark. Hadoop uses a concept called &lt;em&gt;MapReduce&lt;/em&gt;, which has two components Map and Reduce. Below is an simplified example of the concept.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./mapreduce.jpg&#34; alt=&#34;Mastering Apache Spark with R&#34; /&gt;
&lt;em&gt;from: Mastering Apache Spark with R&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spark&lt;/strong&gt; optimize MapReduce by using in-memory data to perform data analysis which significantly increase the speed of data analysis than Hadoop on-disk storage. While Spark has great advantages in in-memory data performance, it also holds some &lt;a href=&#34;https://spark.apache.org/news/spark-wins-cloudsort-100tb-benchmark.html&#34; target=&#34;_blank&#34;&gt;records&lt;/a&gt; in on-disk performance&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;I have a simple problem of filtering some procedures our research groups are interested in using MedPAR. I used my local computer as host.&lt;/p&gt;

&lt;h3 id=&#34;step1-connect-to-spark&#34;&gt;Step1: connect to spark&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;JAVA Version&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I first tried to connect to Spark using &lt;code&gt;sc &amp;lt;- spark_connect(master = &amp;quot;local&amp;quot;)&lt;/code&gt;, it gave me error regarding my Java version. So I followed the steps below to download Java 8 and point Java Home to the right version. I used brew in command line to download Java 8. Note, you might not have the java issue as I do. So, just try connecting to spark first before you download java.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# sparklyr only work on java8, below is setting the java version to use in Bash
brew tap homebrew/cask-versions
brew cask install homebrew/cask-versions/adoptopenjdk8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in R, I point the downloaded version to my JAVA HOME. If you use MAC, the default downloaded java location should be the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# set java to 8, otherwise sarklyr doesn&#39;t work
Sys.setenv(JAVA_HOME = &amp;quot;/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home&amp;quot;)
sc &amp;lt;- spark_connect(master = &amp;quot;local&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In next post, I will introduce more about configuration for you local computer when connecting in &amp;ldquo;local&amp;rdquo; mode.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aftermath of Apple Picking - So Many Apples</title>
      <link>/fun/apple_picking/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/fun/apple_picking/</guid>
      <description>


&lt;p&gt;I recently went to apple picking on a sunny weekend. Fall in Michigan especially around this time is very beautiful. Going to apple picking is a nice activity to enjoy the fall foliage in the country and get some workout by working and picking the apples.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.wasemfruitfarm.com/&#34;&gt;apple pick farm&lt;/a&gt; I went was pretty nice. I loved their warm donuts, despite there was a wait. The minimum apples to purchase was to fill a half &lt;a href=&#34;https://en.wikipedia.org/wiki/Bushel&#34;&gt;bushel&lt;/a&gt;! It is A LOT apples!&lt;/p&gt;
&lt;p&gt;Here are some things I did/plan to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eat an apple a day for a week during lunch&lt;/li&gt;
&lt;li&gt;Bring a bag to work to share with coworkers&lt;/li&gt;
&lt;li&gt;Give a bag to the neighbor&lt;/li&gt;
&lt;li&gt;Cook them!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;some cooking recopies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.laurainthekitchen.com/recipes/skillet-pork-chops-with-apples-and-onions/&#34;&gt;Pork Chop with Apple and Onion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used 4 Pork Chop (the kind that doesn’t have bones) and 2 big apples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.allrecipes.com/recipe/268029/chef-johns-apple-butter/&#34;&gt;Apple Butter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I liked this idea and recipe. I have never had apple butter, but it does tastes very good. Since I eat a toast for breakfast basically everyday, so I can definitely see the use of this butter!&lt;/p&gt;
&lt;p&gt;Ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 pounds of apples (around 12 apples, I used a mix of all the apples I have) &lt;/br&gt;&lt;/li&gt;
&lt;li&gt;3/4 cup of white sugar and half cup of brown sugar &lt;/br&gt;&lt;/li&gt;
&lt;li&gt;one tsp cinnamon, one tsp salt, half tsp nutmeg, half tsp allspice &lt;/br&gt;&lt;/li&gt;
&lt;li&gt;1/4 cup of apple vinegar&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How I build Hugo Academic in RStudio</title>
      <link>/post/build_hugo_webiste/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/build_hugo_webiste/</guid>
      <description>

&lt;p&gt;I recently did this website using Hugo Academic theme. There are a lot resources on the internet that are very helpful. But, I still find setting up this website was not easy. In this post, I will write down a step by step tutorial using Rstudio and Github to build this website. I hope following my steps would make your experience with Hugo Academic easier! I have very little experience in building website.&lt;/p&gt;

&lt;h2 id=&#34;step-1-create-a-repo-on-github&#34;&gt;Step 1: create a repo on github.&lt;/h2&gt;

&lt;p&gt;I personally use Gitkraken to set up repo on github. Here is how I did on gitkraken. You definitly can do it using other tools.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;notes and thoughts: Github will be your version control tool. If you use Netlify as the web host, you will push the changes to github and your website will be updated automaticly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./repo_github.png&#34; alt=&#34;create repo and clone&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-create-hugo-academic-using-rstudio&#34;&gt;Step 2: create Hugo Academic using Rstudio!&lt;/h2&gt;

&lt;p&gt;Using Rstudio to setup the website is the most convienit and straight-forward way to setup the website. Open the webiste folder through RStudio.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(blogdown)

#create a new site with the academic theme
blogdown::new_site(theme = &amp;quot;gcushen/hugo-academic&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RStudio will create all the folders and files you need for the site. Once you run the &lt;em&gt;new_site&lt;/em&gt; code, you will already have a default website running!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./default_web.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;get-it-running-on-netlify&#34;&gt;Get it running on Netlify&lt;/h2&gt;

&lt;p&gt;I found this is the most confusing and frastrating was to put my website on the internet. So I would recomment put your website on netlify and then make changes to your web. Below are the steps:&lt;/p&gt;

&lt;p&gt;Step1. go to &lt;em&gt;&lt;a href=&#34;https://www.netlify.com/&#34; target=&#34;_blank&#34;&gt;https://www.netlify.com/&lt;/a&gt;&lt;/em&gt; and sign up your account.&lt;/p&gt;

&lt;p&gt;Step2. Once your are signed in, click New Site From Git&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./build_new_web.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step3. Add your website repo from Github on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./net2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step4. Then Deploy Site&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./deploy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;change-some-parameters-in-files&#34;&gt;Change some parameters in files&lt;/h2&gt;

&lt;p&gt;The site is still not running yet.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;change the url in your &lt;em&gt;config.toml&lt;/em&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The URL of your site.
# End your URL with a `/` trailing slash, e.g. `https://example.com/`.
baseurl = &amp;quot;https://happy-shockley-557457.netlify.com/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a netlify.toml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# check your huogo version
blogdown::hugo_version()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;r&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;[build]
publish = &amp;quot;public&amp;quot;
command = &amp;quot;hugo&amp;quot;
[context.production.environment]
HUGO_VERSION = &amp;quot;0.58.1&amp;quot;
HUGO_ENV = &amp;quot;production&amp;quot;
HUGO_ENABLEGITINFO = &amp;quot;true&amp;quot;
[context.branch-deploy.environment]
HUGO_VERSION = &amp;quot;0.58.1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;./netlify.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Commit and push all your files in Rstudio to Github!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;wow!!! Now your website should be on the internet now!!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://happy-shockley-557457.netlify.com/&#34; target=&#34;_blank&#34;&gt;https://happy-shockley-557457.netlify.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Supplementary notes can be added here, including &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
