<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Xilin Chen</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Build Your First Shiny App</title>
      <link>/post/build-your-ffrst-shiny-app/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/build-your-ffrst-shiny-app/</guid>
      <description>

&lt;h1 id=&#34;intro-and-backgroud&#34;&gt;Intro and Backgroud&lt;/h1&gt;

&lt;p&gt;Several weeks ago I started working on my first Shiny app in response for the Covid19 staffing needs. The team I worked with have a understanding of their needs but don&amp;rsquo;t really have a solid specs of how we want to impliment the ideas to form actual products that could help hospitals and nursing homes. Luckily, in our team, we have physicians, hospital admins and medical students who all have deep understanding of their needs and how they would like to get helped.&lt;/p&gt;

&lt;p&gt;Anyway, this was a pretty urgent task since the rapid growing Covid patients. The earlier we got the application done, the hospitals and admins can start to use imidiatly to adress their problems.&lt;/p&gt;

&lt;p&gt;Finally, I have never build Shiny app before but I have some understandings of the features and potentials that I could achieve in Shiny. So I started my Shiny jurneay and actally got my first shiny apps. In this post, I want to share some of my experience hoping it could help some new users like me.&lt;/p&gt;

&lt;h1 id=&#34;content&#34;&gt;Content&lt;/h1&gt;

&lt;h2 id=&#34;basics-you-need-you-know&#34;&gt;Basics you need you know&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Some Tips for Using Sparklyr</title>
      <link>/post/sparklyr_medicare/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/sparklyr_medicare/</guid>
      <description>

&lt;p&gt;One of the challenges when using R for data processing is the limitation of memory. R read data into memory. It has a lot advantages like fast computing, but when working with big data, we would have problems that our over-sized data can&amp;rsquo;t be loaded into R.&lt;/p&gt;

&lt;p&gt;In our research team, all of the analyst colleagues using SAS to address the big data loading problem, since SAS use hard drive to read in data. For me, our group use R for analysis and I am already proficient in R. So I decided to use R to process the Medicare data.&lt;/p&gt;

&lt;p&gt;In this post, I want to introduce a little about why using Spark (what are the advantages) and how you can implement the process I have done if you have the similar problems.&lt;/p&gt;

&lt;p&gt;Here is a great reference book, &lt;a href=&#34;https://therinspark.com/&#34; target=&#34;_blank&#34;&gt;Mastering Apache Spark with R&lt;/a&gt; by Javier Luraschi. If you already have basic skills in R programming, it is an easy book to read and very practical.&lt;/p&gt;

&lt;h2 id=&#34;hippa-data&#34;&gt;HIPPA Data&lt;/h2&gt;

&lt;p&gt;Medicare data has very restricted regulation on how and where to use data. CMS data regulations are actually more strict than HIPPA in some aspects. In our data use agreement, Medicare data can only be stored in a specific network within the university and we can not put data in cloud or any distributed fashion. So all the analysis in this post happened and had to be on my local computer.&lt;/p&gt;

&lt;h2 id=&#34;concepts-of-apache-spark&#34;&gt;Concepts of Apache Spark&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Sparklyr&lt;/em&gt; is just a wrapper for Apache Spark. Basically, it translates the R syntax to the language Spark can read. All the big data operations happened in Spark instead of R.&lt;/p&gt;

&lt;h3 id=&#34;hadoop-and-spark&#34;&gt;Hadoop and Spark&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hadoop&lt;/strong&gt; was first introduced before Spark. But it build the foundation for the development of Spark. Hadoop uses a concept called &lt;em&gt;MapReduce&lt;/em&gt;, which has two components Map and Reduce. Below is an simplified example of the concept.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./mapreduce.jpg&#34; alt=&#34;Mastering Apache Spark with R&#34; /&gt;
&lt;em&gt;from: Mastering Apache Spark with R&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spark&lt;/strong&gt; optimize MapReduce by using in-memory data to perform data analysis which significantly increase the speed of data analysis than Hadoop on-disk storage. While Spark has great advantages in in-memory data performance, it also holds some &lt;a href=&#34;https://spark.apache.org/news/spark-wins-cloudsort-100tb-benchmark.html&#34; target=&#34;_blank&#34;&gt;records&lt;/a&gt; in on-disk performance&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;I have a simple problem of filtering some procedures our research groups are interested in using MedPAR. I used my local computer as host.&lt;/p&gt;

&lt;h3 id=&#34;step1-connect-to-spark&#34;&gt;Step1: connect to spark&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;JAVA Version&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I first tried to connect to Spark using &lt;code&gt;sc &amp;lt;- spark_connect(master = &amp;quot;local&amp;quot;)&lt;/code&gt;, it gave me error regarding my Java version. So I followed the steps below to download Java 8 and point Java Home to the right version. I used brew in command line to download Java 8. Note, you might not have the java issue as I do. So, just try connecting to spark first before you download java.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# sparklyr only work on java8, below is setting the java version to use in Bash
brew tap homebrew/cask-versions
brew cask install homebrew/cask-versions/adoptopenjdk8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in R, I point the downloaded version to my JAVA HOME. If you use MAC, the default downloaded java location should be the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# set java to 8, otherwise sarklyr doesn&#39;t work
Sys.setenv(JAVA_HOME = &amp;quot;/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home&amp;quot;)
sc &amp;lt;- spark_connect(master = &amp;quot;local&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In next post, I will introduce more about configuration for you local computer when connecting in &amp;ldquo;local&amp;rdquo; mode.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I build Hugo Academic in RStudio</title>
      <link>/post/build_hugo_webiste/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/build_hugo_webiste/</guid>
      <description>

&lt;p&gt;I recently did this website using Hugo Academic theme. There are a lot resources on the internet that are very helpful. But, I still find setting up this website was not easy. In this post, I will write down a step by step tutorial using Rstudio and Github to build this website. I hope following my steps would make your experience with Hugo Academic easier! I have very little experience in building website.&lt;/p&gt;

&lt;h2 id=&#34;step-1-create-a-repo-on-github&#34;&gt;Step 1: create a repo on github.&lt;/h2&gt;

&lt;p&gt;I personally use Gitkraken to set up repo on github. Here is how I did on gitkraken. You definitly can do it using other tools.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;notes and thoughts: Github will be your version control tool. If you use Netlify as the web host, you will push the changes to github and your website will be updated automaticly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./repo_github.png&#34; alt=&#34;create repo and clone&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-create-hugo-academic-using-rstudio&#34;&gt;Step 2: create Hugo Academic using Rstudio!&lt;/h2&gt;

&lt;p&gt;Using Rstudio to setup the website is the most convienit and straight-forward way to setup the website. Open the webiste folder through RStudio.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(blogdown)

#create a new site with the academic theme
blogdown::new_site(theme = &amp;quot;gcushen/hugo-academic&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RStudio will create all the folders and files you need for the site. Once you run the &lt;em&gt;new_site&lt;/em&gt; code, you will already have a default website running!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./default_web.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;get-it-running-on-netlify&#34;&gt;Get it running on Netlify&lt;/h2&gt;

&lt;p&gt;I found this is the most confusing and frastrating was to put my website on the internet. So I would recomment put your website on netlify and then make changes to your web. Below are the steps:&lt;/p&gt;

&lt;p&gt;Step1. go to &lt;em&gt;&lt;a href=&#34;https://www.netlify.com/&#34; target=&#34;_blank&#34;&gt;https://www.netlify.com/&lt;/a&gt;&lt;/em&gt; and sign up your account.&lt;/p&gt;

&lt;p&gt;Step2. Once your are signed in, click New Site From Git&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./build_new_web.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step3. Add your website repo from Github on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./net2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step4. Then Deploy Site&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./deploy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;change-some-parameters-in-files&#34;&gt;Change some parameters in files&lt;/h2&gt;

&lt;p&gt;The site is still not running yet.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;change the url in your &lt;em&gt;config.toml&lt;/em&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The URL of your site.
# End your URL with a `/` trailing slash, e.g. `https://example.com/`.
baseurl = &amp;quot;https://happy-shockley-557457.netlify.com/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a netlify.toml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# check your huogo version
blogdown::hugo_version()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;r&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;[build]
publish = &amp;quot;public&amp;quot;
command = &amp;quot;hugo&amp;quot;
[context.production.environment]
HUGO_VERSION = &amp;quot;0.58.1&amp;quot;
HUGO_ENV = &amp;quot;production&amp;quot;
HUGO_ENABLEGITINFO = &amp;quot;true&amp;quot;
[context.branch-deploy.environment]
HUGO_VERSION = &amp;quot;0.58.1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;./netlify.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Commit and push all your files in Rstudio to Github!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;wow!!! Now your website should be on the internet now!!!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://happy-shockley-557457.netlify.com/&#34; target=&#34;_blank&#34;&gt;https://happy-shockley-557457.netlify.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
